/**
 * My API
 * Documentation automatically generated by the <b>swagger-autogen</b> module.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { ArrayOti } from '../model/arrayOti';
import { AsignarTarea } from '../model/asignarTarea';
import { Oti } from '../model/oti';
import { Tareas } from '../model/tareas';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class TareaService {

    protected basePath = 'http://localhost:8081';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Endpoint para asignar tarea a un operario.
     * @param asignarTarea datos para asignar una tarea
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tareaAsignarTareaPost(asignarTarea: AsignarTarea, observe?: 'body', reportProgress?: boolean): Observable<Oti>;
    public tareaAsignarTareaPost(asignarTarea: AsignarTarea, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Oti>>;
    public tareaAsignarTareaPost(asignarTarea: AsignarTarea, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Oti>>;
    public tareaAsignarTareaPost(asignarTarea: AsignarTarea, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (asignarTarea === null || asignarTarea === undefined) {
            throw new Error('Required parameter asignarTarea was null or undefined when calling tareaAsignarTareaPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Oti>(`${this.basePath}/tarea/asignarTarea`,
            asignarTarea,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Endpoint para obtener las otis del sector.
     * @param nombre nombre del sector
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tareaObtenerOtisNombreGet(nombre: string, observe?: 'body', reportProgress?: boolean): Observable<ArrayOti>;
    public tareaObtenerOtisNombreGet(nombre: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ArrayOti>>;
    public tareaObtenerOtisNombreGet(nombre: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ArrayOti>>;
    public tareaObtenerOtisNombreGet(nombre: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (nombre === null || nombre === undefined) {
            throw new Error('Required parameter nombre was null or undefined when calling tareaObtenerOtisNombreGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ArrayOti>(`${this.basePath}/tarea/obtenerOtis/${encodeURIComponent(String(nombre))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Endpoint para obtener las tareas asigandas de un operario.
     * @param id ID de oti
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public tareaObtenerTareasIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<Tareas>;
    public tareaObtenerTareasIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Tareas>>;
    public tareaObtenerTareasIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Tareas>>;
    public tareaObtenerTareasIdGet(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling tareaObtenerTareasIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Tareas>(`${this.basePath}/tarea/obtenerTareas/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
